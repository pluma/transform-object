{"name":"transform-object","tagline":"transform objects using deep transformations","body":"# Synopsis\r\n\r\n**transform-object** transforms objects.\r\n\r\n[![Build Status](https://travis-ci.org/pluma/transform-object.png?branch=master)](https://travis-ci.org/pluma/transform-object) [![NPM version](https://badge.fury.io/js/transform-object.png)](http://badge.fury.io/js/transform-object) [![Dependencies](https://david-dm.org/pluma/transform-object.png)](https://david-dm.org/pluma/transform-object)\r\n\r\n# Install\r\n\r\n## With NPM\r\n\r\n```sh\r\nnpm install transform-object\r\n```\r\n\r\n## From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/transform-object.git\r\ncd transform-object\r\nnpm install\r\nmake test\r\n```\r\n\r\n# API\r\n\r\n## transform(obj, transformation)\r\n\r\nTransforms the given object by mapping it against the given transformation recursively.\r\n\r\nIf `obj` is an array and `transformation` is an array, returns an array of the results of applying each transformation in the `transformation` array to the respective object in the `obj` array:\r\n\r\n```javascript\r\nfunction upper(s) {return s.toUpperCase();}\r\nfunction lower(s) {return s.toLowerCase();}\r\nvar result = transform(['Foo', 'Bar', 'Qux'], [upper, lower]);\r\nconsole.log(result); // ['FOO', 'bar', 'Qux']\r\n```\r\n\r\nIf `obj` is an array and `transformation` is not an array, returns an array of the results of applying the `transformation` to each object in the `obj` array:\r\n\r\n```javascript\r\nfunction upper(s) {return s.toUpperCase();}\r\nvar result = transform(['Foo', 'Bar', 'Qux'], upper);\r\nconsole.log(result); // ['FOO', 'BAR', 'QUX']\r\n```\r\n\r\nIf `obj` is an object and `transformation` is an object, returns a new object with each property set to the result of applying the property of the `transformation` to the respective property of the `obj`:\r\n\r\n```javascript\r\nfunction upper(s) {return s.toUpperCase();}\r\nfunction lower(s) {return s.toLowerCase();}\r\nvar result = transform({a: 'Foo', b: 'Bar', c: 'Qux'}, {a: upper, b: lower});\r\nconsole.log(result); // {a: 'FOO', b: 'bar', c: 'Qux'}\r\n```\r\n\r\nIf `transformation` is a `Function`, returns the result of calling it with the given `obj` as argument:\r\n\r\n```javascript\r\nfunction upper(s) {return s.toUpperCase();}\r\nvar result = transform('foo', upper);\r\nconsole.log(result); // 'FOO'\r\n```\r\n\r\nIf `transformation` is `undefined`, returns the `obj`:\r\n\r\n```javascript\r\nvar result = transform('foo', undefined);\r\nconsole.log(result); // 'foo'\r\n```\r\n\r\nOtherwise returns the `transformation`:\r\n\r\n```javascript\r\nvar result = transform('foo', 'bar');\r\nconsole.log(result); // 'bar'\r\n```\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/transform-object/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}